import numpy as np
import matplotlib.pyplot as plt
from scipy.spatial import Voronoi, voronoi_plot_2d
from shapely.geometry import Polygon, box

# Configuration
n_points = 100
bounding_box = np.array([0.,687.,0.,687.])  # [x_min, x_max, y_min, y_max]

def generate_voronoi_diagram(n_points, bounding_box):
    """
    Generate and plot a bounded Voronoi diagram.
    """

    points = np.random.randint(bounding_box[0], bounding_box[1], (n_points, 2))

    
    # points = np.array([
    #     [525.88338281, 655.80219178],
    #     [589.72196478, 129.20188337],
    #     [172.4678253, 209.38408351],
    #     [577.59540191, 106.83645102],
    #     [74.00669653, 163.68677273],
    #     [647.51841963, 586.95986625],
    #     [444.32586319, 618.38550077],
    #     [199.07010422, 93.46620317],
    #     [61.41710575, 89.56028581],
    #     [188.17828481, 221.425686],
    #     [509.30628285, 662.92331372],
    #     [396.38639673, 580.38833895],
    #     [142.53782513, 521.34662766],
    #     [246.97920714, 516.95653981],
    #     [83.34069905, 323.59296566],
    #     [497.08494197, 158.90726989],
    #     [656.29712756, 180.37233992],
    #     [316.18109659, 330.08493045],
    #     [456.3210778, 375.02889451],
    #     [34.45674771, 613.22710463],
    #     [179.32725776, 290.6054812],
    #     [514.49039127, 498.76027989],
    #     [503.76870752, 165.84080805],
    #     [198.688106, 453.32783428],
    #     [605.63586246, 494.69004474],
    #     [178.67343068, 313.80214719],
    #     [485.56685325, 215.00736072],
    #     [654.03721274, 168.49358685],
    #     [39.63287251, 177.94068985],
    #     [66.61605208, 284.31188157],
    #     [653.88371603, 92.28566139],
    #     [466.17618301, 355.80122965],
    #     [297.96019149, 395.51561186],
    #     [399.62885487, 336.6338656],
    #     [37.94340638, 222.2294407],
    #     [78.89279304, 352.33456706],
    #     [227.43862071, 104.07393363],
    #     [101.75707927, 553.04056928],
    #     [260.51874882, 396.37623132],
    #     [423.37119575, 225.58952679],
    #     [529.38625278, 143.20943527],
    #     [627.50830561, 229.79173813],
    #     [328.11472312, 146.65228589],
    #     [403.67485177, 520.79386322],
    #     [126.94095414, 234.08186947],
    #     [481.16002431, 488.36967816],
    #     [486.00980812, 35.44151162],
    #     [82.97671937, 379.80884085],
    #     [311.155273, 542.01336387],
    #     [235.9105913, 624.44310789],
    #     [601.66535018, 127.80619535],
    #     [570.62881759, 162.2719858],
    #     [229.19340303, 212.03427839],
    #     [536.57350093, 21.90404066],
    #     [569.58904932, 37.1524717],
    #     [167.76220359, 380.06002294],
    #     [256.48354036, 246.75760766],
    #     [75.17766841, 413.24300636],
    #     [163.60483098, 343.76899202],
    #     [418.10257457, 505.30943431],
    #     [628.18405178, 137.79644542],
    #     [390.62690348, 646.4817025],
    #     [75.6243726, 479.41789145],
    #     [27.27743917, 139.60458714],
    #     [158.59343009, 472.08472929],
    #     [642.26017803, 63.1640033],
    #     [189.17815273, 112.43918607],
    #     [617.05896823, 110.16685435],
    #     [476.48877162, 336.75816087],
    #     [324.58382174, 337.87577216],
    #     [547.86670076, 169.1258542],
    #     [168.22234211, 364.41927534],
    #     [200.67858543, 544.97480035],
    #     [318.34857381, 42.59547154],
    #     [194.45441115, 282.61823089],
    #     [507.40799412, 601.86452909],
    #     [83.2541058, 369.28673053],
    #     [380.02447172, 199.49875569],
    #     [305.38413954, 456.08380564],
    #     [227.90905586, 151.73689161],
    #     [308.29675757, 66.40099687],
    #     [312.72958942, 665.1261694],
    #     [100.0514818, 297.37821414],
    #     [282.16209222, 123.05850515],
    #     [240.94167108, 413.6887089],
    #     [259.2349309, 69.43218098],
    #     [311.94316195, 473.04344705],
    #     [352.40780417, 155.57361104],
    #     [285.85667736, 32.86707725],
    #     [515.29331871, 650.58208437],
    #     [169.54732, 381.61463811],
    #     [544.87066462, 218.85631892],
    #     [613.23169536, 516.81817121],
    #     [545.32339403, 597.00650679],
    #     [308.14302776, 287.42087233],
    #     [160.63131784, 213.40837083],
    #     [584.14889417, 316.26454712],
    #     [511.30162832, 108.82790719],
    #     [600.32095586, 523.58914691],
    #     [353.68919672, 616.15346688],
    #     [529.81897502, 132.74484222],
    #     [306.09896724, 106.3756047],
    #     [513.55681311, 600.27897839],
    #     [253.8178923, 101.31374513],
    #     [534.22738792, 74.92774085],
    #     [161.25879931, 622.84107241],
    #     [555.80367897, 505.70912288],
    #     [157.10876318, 386.36742415],
    #     [439.90637394, 390.49005011],
    #     [341.0974784, 519.11676367],
    #     [506.70974354, 460.32816265],
    #     [591.89472485, 610.63979061],
    #     [224.83163857, 414.31899102],
    #     [644.08465296, 164.13566121],
    #     [106.46898482, 185.02463368],
    #     [134.60093213, 92.07225778],
    #     [353.88982206, 499.22874849],
    #     [156.02541983, 254.0393285],
    #     [611.6086826, 358.63096132],
    #     [523.43368387, 504.2449426],
    #     [449.49172916, 175.97433115],
    #     [96.63696221, 532.72447965],
    #     [628.01329095, 262.66087599],
    #     [217.34143247, 119.13501955],
    #     [592.20698621, 559.13061836],
    #     [450.55803075, 317.11388489],
    #     [365.5626049, 299.78209466],
    #     [220.36206877, 327.34524131],
    #     [217.42191234, 203.49402616],
    #     [449.60089313, 113.83545583],
    #     [146.81010635, 293.43386945],
    #     [176.70526939, 165.44125489],
    #     [423.14483085, 102.88761743],
    #     [632.89702441, 601.31791981],
    #     [570.71571194, 539.54417863],
    #     [362.04170575, 211.40238652],
    #     [410.84915435, 87.5895109],
    #     [599.44551724, 486.0088805],
    #     [266.07034802, 539.12371224],
    #     [556.50192176, 334.01763414],
    #     [312.10936001, 531.28394339],
    #     [273.45350586, 484.47766168],
    #     [303.015726, 281.79279174],
    #     [143.81689031, 344.85957358],
    #     [459.2709342, 543.970714],
    #     [274.95879999, 503.57040844],
    #     [281.28702199, 195.19136426],
    #     [155.2351436, 544.98876229],
    #     [340.98929101, 160.96063252],
    #     [480.50823934, 584.29038673],
    #     [414.42288912, 562.51755733],
    #     [631.48734123, 512.56123946],
    #     [519.22115633, 67.33131482],
    #     [343.9190934, 223.83759747],
    #     [171.24453721, 158.70506353],
    #     [87.26121417, 261.03187227]
    # ])

    # Mirror points to ensure regions are bounded
    mirrored_points = mirror_points(points, bounding_box)

    # Compute Voronoi diagram for all points
    vor = Voronoi(mirrored_points)

    # Plotting
    fig, ax = plt.subplots()
    voronoi_plot_2d(vor, ax=ax, show_vertices=False, line_colors='black', line_width=2, line_alpha=0.6, point_size=2)

    ax.plot(points[:, 0], points[:, 1], 'b.', markersize=5)

    ax.set_xlim(bounding_box[0] - 750, bounding_box[1] + 750)
    ax.set_ylim(bounding_box[2] - 750, bounding_box[3] + 750)
    ax.set_aspect('equal')

    plt.savefig("bounded_voronoi_diagram.png")
    plt.show()

def mirror_points(points, bounding_box):
    """
    Mirror points at the edges of the bounding box to ensure bounded Voronoi regions.
    """
    points_left = np.copy(points)
    points_left[:, 0] = bounding_box[0] - (points_left[:, 0] - bounding_box[0])

    points_right = np.copy(points)
    points_right[:, 0] = bounding_box[1] + (bounding_box[1] - points_right[:, 0])

    points_down = np.copy(points)
    points_down[:, 1] = bounding_box[2] - (points_down[:, 1] - bounding_box[2])

    points_up = np.copy(points)
    points_up[:, 1] = bounding_box[3] + (bounding_box[3] - points_up[:, 1])

    # Combine original and mirrored points
    all_points = np.vstack([points, points_left, points_right, points_down, points_up])
    
    return all_points

# Generate and plot the bounded Voronoi diagram
generate_voronoi_diagram(n_points, bounding_box)